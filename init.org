#+PROPERTY: header-args:elisp :lexical t* euokyun's emacs init file
#+auto_tangle: t

* TODO init [0/1]
:PROPERTIES:
:ID:       F1E0215D-092D-48C4-90FD-43995FCF0655
:END:

- [ ] 재분류하기
  + 2를 범주로, 3을 패키지로?
  + 범주를 각각의 el 파일로?
    - el 파일들은 수정시 auto tangle, 마지막으로 init 수정시 컴파일

** emacs configuration
:PROPERTIES:
:ID:       DD2478FC-CE8A-4BCC-9F47-97CB060ECB00
:END:
#+begin_src emacs-lisp :tangle yes
;;; init.el -*- lexical-binding: t; -*-
;;; Commentary: euokyun's emacs init file.
;;; Code:
#+end_src
*** backup file-name-handler-alist
:PROPERTIES:
:ID:       069B8D28-4544-4F70-843C-7B759D3798DE
:END:
최적화를 위한 방법
#+begin_src emacs-lisp :tangle yes
(setq file-name-handler-alist-var file-name-handler-alist)
#+end_src

*** COMMENT debug setting
:PROPERTIES:
:ID:       C8621424-E58D-408A-94DD-194E57EEF3DC
:END:
init 파일 디버그 용도
#+begin_src emacs-lisp :tangle yes
(setq debug-on-error t)
#+end_src
*** user information
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Jeon Euokyun"
      user-mail-address "euokyun@me.com")
#+end_src

*** COMMENT emacs customize file
이맥스에서 자동으로 생성하는 커스터마이즈 형식이 있는데 사용자가 직접 수정하는걸 권장하지 않는다. 스스로 강하게 살아가도록 파일을 분리시켜 놓는 편이 편하다.
#+begin_src emacs-lisp :tangle yes
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+end_src
*** cus-edit
:PROPERTIES:
:ID:       E8F12E83-8B6D-49CE-A14E-9270170AE458
:END:
speed up load time 

#+begin_src emacs-lisp :tangle yes
(use-package cus-edit
  :straight (:type built-in)
  :defer 1
  :custom
  (custom-file (expand-file-name "custom.el" user-emacs-directory))
  :config 
  (unless (file-exists-p custom-file)
    (write-file custom-file))
  (when (file-exists-p custom-file)
    (load-file custom-file)))
#+end_src

*** font settings
**** 기본 폰트 설정
:PROPERTIES:
:ID:       B77FA35F-A5B2-483C-B4D7-97F8495F22AA
:END:
#+begin_src emacs-lisp :tangle yes
;; (set-face-attribute 'default nil :font "Iosevka SS08" :height 170)
(set-face-attribute 'default nil :height 170)
;; (set-frame-font "Iosevka SS08" t t)
(set-frame-font "Sarasa Mono K" t t)
#+end_src

**** all-the-icons 설정
:PROPERTIES:
:ID:       939CC04F-D484-4C8A-98B0-C47029C0B2E6
:END:
#+begin_src emacs-lisp :tangle yes
(set-fontset-font "fontset-default" 'unicode (font-spec :family "Material Icons") nil)
(set-fontset-font "fontset-default" 'unicode (font-spec :family "github-octicons") nil 'prepend)
(set-fontset-font "fontset-default" 'unicode (font-spec :family "FontAwesome") nil 'prepend)
(set-fontset-font "fontset-default" 'unicode (font-spec :family "all-the-icons") nil 'prepend)
;; (set-fontset-font "fontset-default" 'unicode (font-spec :family "MesloLGS") nil 'append)
(set-fontset-font "fontset-default" 'unicode (font-spec :family "Weather Icons") nil 'append)
(set-fontset-font "fontset-default" 'unicode (font-spec :family "file-icons") nil 'append)
#+end_src

**** 개별 캐릭터 폰트 수정
:PROPERTIES:
:ID:       8FFBD7B4-ACF9-4FBD-9555-ED501CDE30D4
:END:
#+begin_src emacs-lisp :tangle yes
(set-fontset-font "fontset-default"
                  (decode-char 'ucs #x2318) ; mac의 command 키 아이콘
                  "D2Coding")
#+end_src

*** variable
:PROPERTIES:
:ID:       90953AC8-DA01-4BEC-886E-DE39A4CB9DC8
:END:
이맥스 기본 설정들의 묶음
#+begin_src emacs-lisp :tangle yes
(setq-default
#+end_src

**** 설정
:PROPERTIES:
:ID:       B6171D14-9152-4648-8F4F-9283EA809775
:END:
#+begin_src emacs-lisp :tangle yes
initial-major-mode 'lisp-interaction-mode
garbage-collection-messages nil        ;
ad-redefinition-action 'accept         ; silent warning for redifinition.
;; auto-save-default nil                  ; do not make temporary auto-save files. now i use `super-save' instead.
byte-compile-warnings '(cl-functions)  ; silent old cl-functions warning.
native-comp-async-report-warnings-errors nil  ; silent gccemacs native comp warning.
package-native-compile t
;; find-function-C-source-directory "/Applications/Emacs.app/Contents/Resources/src"
cursor-in-non-selected-windows nil     ; only shows the cursor of focus buffer.
cursor-type '(hbar . 2)                ; 2px size horizontal bar
default-input-method "korean-hangul"   ; input method for korean
delete-by-moving-to-trash t            ; delete = trash
delete-selection-mode t                ; override selection
;; desktop-save-mode 1                    ; save last frame -- can break perspective.
indent-tabs-mode nil                   ; tab=space!
tab-width 4                            ; space=4!
inhibit-startup-screen t               ;
initial-scratch-message nil            ; empty *scratch* buffer.
keyboard-coding-system 'utf-8-unix     ; utf-8
large-file-warning-threshold nil       ; do not warn file size.
make-backup-files nil                  ; do not make temporal backup files.
scroll-step 1                          ; scroll step
show-help-function nil                 ; t
straight-check-for-modifications '(check-on-save find-when-checking) ; don't catch modification unless `save buffer' command.
use-dialog-box nil                     ;
vc-follow-symlinks t                   ; silent warning for symlink.
warning-minimum-level :error           ;
warning-suppress-log-types '((comp))   ; silent warning for native-comp.
warning-suppress-types '((use-package) (use-package))
fill-column 80                         ; default is `70'. force line breaker.
comment-column 60                      ; set comment column to 60
window-combination-resize t            ;
x-stretch-cursor t                     ;
truncate-lines t                       ; do not wrap code.
backup-by-copying t                    ; make backup.
;; global-auto-revert-non-file-buffers t  ; revert dired and other buffers.
auto-revert-verbose nil                ; do not message this
auto-revert-avoid-polling t            ; do not use pooling.
delete-old-versions t                  ; delete old versions.
version-control t                      ;
x-underline-at-descent-line t          ; Underline looks a bit better when drawn lower
inhibit-compacting-font-caches t       ; for fix all-the-icons slow rendering
even-window-sizes nil                  ; perspective - fix window layout.
;; tab-bar-format '(tab-bar-format-global) ; global modeline using emacs28 tab-bar
;; tab-bar-mode t                         ; http://ruzkuku.com/texts/emacs-global.html
;; tab-line-mode t

use-default-font-for-symbols nil
require-final-newline t ; according to POSIX, every text file should end with newline.
imenu-auto-rescan t
scroll-step 1      ; keyboard scroll one line at a time
use-dialog-box nil ; Disable dialog boxes since they weren't working in Mac OSX
world-clock-list '(("Asia/Seoul" "Seoul")
                   ;; ("America/Los_Angeles" "Seattle")
                   ("America/New_York" "New York")
                   ("Etc/UTC" "UTC"))
world-clock-time-format "%a, %e %b %T %Z"
display-time-format "%R"
display-time-default-load-average nil
blink-cursor-mode nil
create-lockfiles nil                    ; .#foo.txt 등의 lockfile을 생성하지 않음
disabled-command-function nil           ; 어려운 기능 경고 해제
async-bytecomp-package-mode t
save-interprogram-paste-before-kill t   ; 다른 프로그램의 클립보드를 덮어쓰기 전에 저장함
switch-to-buffer-preserve-window-point 'already-displayed
straight-recipes-gnu-elpa-use-mirror nil
straight-recipes-emacsmirror-use-mirror nil
#+end_src

**** COMMENT 버퍼 범위를 보여줌.
:PROPERTIES:
:ID:       92B1B912-9A3D-4866-8440-8271DDC369B5
:END:
#+begin_src emacs-lisp :tangle yes
indicate-buffer-boundaries 'left
#+end_src

**** 문장의 끝을 "  "가 아니라 " "로 변경
#+begin_src emacs-lisp :tangle yes
sentence-end-double-space nil
#+end_src

**** long-line 최적화
:PROPERTIES:
:ID:       FE039B5B-769F-4A3A-B1BE-1E9A2225E88D
:END:
https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html

***** 양방향 편집
:PROPERTIES:
:ID:       6F8DB037-DCB4-42DD-846B-F2B600EAF9E5
:END:
- 양방향 편집을 제거
#+begin_src emacs-lisp :tangle yes
bidi-paragraph-direction 'left-to-right
#+end_src

- 양방향 괄호 알고리즘 변경
#+begin_src emacs-lisp :tangle yes
bidi-inhibit-bpa t
#+end_src

**** end
:PROPERTIES:
:ID:       FD2BF4E5-1437-48CA-8FC1-3E19D6F66535
:END:
#+begin_src emacs-lisp :tangle yes
 )
#+end_src

*** 기타 설정
:PROPERTIES:
:ID:       61B70326-3139-4DBA-9A61-0717562110EC
:END:
**** 자잘한 설정들
:PROPERTIES:
:ID:       DB530F2B-6C89-4E44-866C-19377DE7F3F7
:END:
#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)           ; Replace yes/no prompts with y/n
(put 'add-function 'lisp-indent-function 2)
(put 'advice-add 'lisp-indent-function 2)
(put 'plist-put 'lisp-indent-function 2)
#+end_src

- 창 변경 undo/redo
#+begin_src emacs-lisp :tangle yes
(winner-mode t)
#+end_src

- 모드라인에 컬럼 번호 표시
#+begin_src emacs-lisp :tangle yes
(column-number-mode)
#+end_src

- 긴 줄에서 퍼포먼스 저하가 있을 때 마이너 모드를 비활성화함
#+begin_src emacs-lisp :tangle yes
(global-so-long-mode 1)
#+end_src

*** built-in package 설정
:PROPERTIES:
:ID:       D57DA809-B17B-4838-8466-6D26485CF9B2
:END:
**** mwheel
#+begin_src emacs-lisp :tangle yes
(use-package mwheel
  :straight (:type built-in)
  :custom
  (mouse-wheel-scroll-amount '(1 ((shift) . 10)))
  (mouse-wheel-progressive-speed nil)
  (mouse-wheel-flip-direction t)
  (mouse-wheel-tilt-scroll t)
  (mouse-wheel-follow-mouse t))
#+end_src

**** frame
:PROPERTIES:
:ID:       056B76C8-F847-45B2-A3AF-E7F470A7A2FF
:END:
#+begin_src emacs-lisp :tangle yes
(use-package frame
  :straight (:type built-in)
  :custom
  (frame-resize-pixelwise t)            ; fix frame margin/padding
  (window-resize-pixelwise t)
  (ns-use-proxy-icon nil)               ; do not use icon in titlebar
  (display-buffer-base-action
   '((display-buffer-reuse-window display-buffer-same-window)
     (reusable-frames . t)))            ; perspective - fix window layout.
  (ns-pop-up-frames nil)                ; macos specific
  (frame-title-format nil))
#+end_src

** load packages
:PROPERTIES:
:ID:       EC021F1C-6561-4A61-912D-DEEFF7454F04
:END:
#+begin_src emacs-lisp :tangle yes
(defvar elisp-dir
  (expand-file-name "elisp" user-emacs-directory)
  "Read auxiliary elisp file.")

(defmacro load-files (dir lst)
  `(mapc (lambda (l)
           (load (expand-file-name (format "%s" l) ,dir))) ,lst))

(load-files elisp-dir
            '(core
              keymaps
              font
              ui
              editing
              completion
              file
              project
              theme
              vc
              langs
              org
              utils
              snippet))
#+end_src

** 기타 코드들
:PROPERTIES:
:ID:       8851551D-EC7F-4275-AE88-A855A25A0B8E
:END:
**** file-modified-before-p
:PROPERTIES:
:ID:       631361C2-592E-4699-B046-F107E57215C2
:END:
#+begin_src emacs-lisp :tangle yes
(defun file-modified-before-p (time file)
  "If file's last modified time is before `time', return `t' else return `nil'."
  (time-less-p
   (time-subtract (float-time (current-time)) (float-time time))
   (float-time (file-attribute-modification-time
                (file-attributes file)))))
(defun file-modified-before-days-p (day file)
  "Wrapper function for `file-before-p'."
  (file-modified-before-p (days-to-time day) file))
#+end_src

**** unadvice
:PROPERTIES:
:ID:       44DF7EA2-FDB7-48A2-91B9-1A7BAAE7C175
:END:
https://emacs.stackexchange.com/questions/24657/unadvise-a-function-remove-all-advice-from-it
symbol에 대한 모든 advice를 제거한다.
#+begin_src emacs-lisp :tangle yes
(defun unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))
#+end_src

**** uniquify region
:PROPERTIES:
:ID:       58C74332-5EBE-4182-A32F-4E87CA44A095
:END:
https://www.emacswiki.org/emacs/DuplicateLines
#+begin_src emacs-lisp :tangle yes
(defun uniquify-region-lines (beg end)
  "Remove duplicate adjacent lines in region."
  (interactive "*r")
  (save-excursion
    (goto-char beg)
    (while (re-search-forward "^\\(.*\n\\)\\1+" end t)
      (replace-match "\\1"))))

(defun paf/sort-and-uniquify-region ()
  "Remove duplicates and sort lines in region."
  (interactive)
  (sort-lines nil (region-beginning) (region-end))
  (uniquify-region-lines (region-beginning) (region-end)))
#+end_src

**** last-message
#+begin_src emacs-lisp :tangle yes
(defun last-message (&optional num)
  (or num (setq num 1))
  (if (= num 0)
      (current-message)
    (save-excursion
      (set-buffer "*Messages*")
      (save-excursion
        (forward-line (- 1 num))
        (backward-char)
        (let ((end (point)))
          (forward-line 0)
          (buffer-substring-no-properties (point) end))))))
(defun insert-last-message (&optional num)
  (interactive "*p")
  (insert (last-message num)))
#+end_src

**** TODO toggle-window-dedicated [0/2]
:PROPERTIES:
:ID:       D92D12A2-9693-4726-ADF9-D8A82004E4FD
:END:
https://emacs.stackexchange.com/a/2198

#+begin_src emacs-lisp :tangle yes
(defun toggle-window-dedicated ()
  "Control whether or not Emacs is allowed to display another buffer in current window."
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window (not (window-dedicated-p window))))
       "%s: Can't touch this!"
     "%s is up for grabs.")
   (current-buffer)))
#+end_src

- [ ] ace-window와 통합
- [ ] modeline 등등 표시할 것이 필요함

**** tail message buffer
:PROPERTIES:
:ID:       BD2365D0-309C-4956-AAD7-680B6635F6C2
:END:
Message 버퍼는 파일 버퍼가 아니라서 auto-revert-tail-mode가 동작하지 않는다.

#+begin_src emacs-lisp :tangle yes
(advice-add 'message :after
  (defun me/message-tail (&rest _)
    (let* ((name "*Messages*")
           (buffer (get-buffer-create name)))
      (when (not (string= name (buffer-name)))
        (dolist (window (get-buffer-window-list name nil t))
          (with-selected-window window
            (goto-char (point-max))))))))
#+end_src

**** TODO COMMENT enlarge window
:PROPERTIES:
:ID:       1395958D-7AC6-48D1-A60E-1E8A6121950C
:END:
https://www.reddit.com/r/emacs/comments/qgxz43/allow_use_of_to_repeat_emacs_command_aliased_as/
#+begin_src emacs-lisp :tangle yes
(defun my-enlarge-window ()
  "Enlarge window horizontally or vertically"
  (interactive)
  (let ((echo-keystrokes nil))
    (message "Enlarge window: [h]orizontally [v]ertically [q]uit")
    (set-transient-map
     (let ((map (make-sparse-keymap)))
       (define-key map (kbd "h") #'enlarge-window-horizontally)
       (define-key map (kbd "v") (lambda (delta) (interactive "p") (enlarge-window delta)))
       map)
     t)))
#+end_src

- [ ] 단위가 너무 작다.

**** toggle maximize buffer
:PROPERTIES:
:ID:       E9CF6360-2577-4301-A341-EF5BBE5641A9
:END:
https://github.com/pascalfleury/emacs-config
#+begin_src emacs-lisp :tangle yes
(defun toggle-maximize-buffer () "Maximize buffer"
       (interactive)
       (if (= 1 (length (window-list)))
           (jump-to-register '_)
         (progn
           (window-configuration-to-register '_)
           (delete-other-windows))))
#+end_src

**** COMMENT svg screenshot
:PROPERTIES:
:CUSTOM_ID: svg-screenshot
:ID:       32BF92A6-70D3-4164-AC2B-C9CC2FAD59DA
:END:
#+begin_src emacs-lisp :tangle yes
(defun screenshot-svg ()
  "Save a screenshot of the current frame as an SVG image.
Saves to a temp file and puts the filename in the kill ring."
  (interactive)
  (let* ((filename (make-temp-file "Emacs" nil ".svg"))
         (data (x-export-frames nil 'svg)))
    (with-temp-file filename
      (insert data))
    (kill-new filename)
    (message filename)))
#+end_src

- cario가 필요함
- cario를 사용하는 MacOS 빌드는 없음

**** open-scratch
:PROPERTIES:
:ID:       14748309-39C1-4FD5-97B3-940AB41AA693
:END:
scratch 버퍼를 여는 함수
#+begin_src emacs-lisp :tangle yes
(defun open-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*")
  (with-current-buffer
      (persistent-scratch-restore)))
#+end_src

**** measure-time
:PROPERTIES:
:ID:       5A3C479D-6DF9-42FB-A6DF-182DF0B7FA0A
:END:
https://stackoverflow.com/questions/23622296/emacs-timing-execution-of-function-calls-in-emacs-lisp
#+begin_src emacs-lisp :tangle yes
(defmacro measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (message "%.06f" (float-time (time-since time)))))
#+end_src

**** scratch 버퍼에 highlight-* 적용
:PROPERTIES:
:ID:       B86D1C2C-3EEB-44F7-BE4F-F984F3858E4C
:END:
#+begin_src emacs-lisp :tangle yes
(defun scratch-apply-highlights ()
  "Highlight elisp syntax"
  (mapc
   (lambda (buffer)
     (with-current-buffer buffer
       (highlight-numbers-mode 1)
       (highlight-defined-mode 1)
       (highlight-quoted-mode  1)))
   (-filter (lambda (buffer)
              (string-match-p "*scratch*" (buffer-name buffer)))
            (buffer-list))))

(general-after-init
  (scratch-apply-highlights))
#+end_src

** keybinding
:PROPERTIES:
:ID:       4C33B0B2-73B1-4C4E-9B00-E57B2EBE00BE
:END:
#+begin_src emacs-lisp :tangle yes
(general-define-key
 "<f17>" 'toggle-input-method
 "s-n"   '(nil
           :which-key "new buffer & frame")
 "s-n f" 'make-frame
 "s-n b" '(clone-indirect-buffer-other-window
           :which-key "clone indirect buffer - other window")
 "s-n B" '(make-indirect-buffer
           :which-key "make indirect buffer"))

(general-define-key
 :keymaps 'help-map
 [remap display-local-help] 'describe-char
 "." 'describe-char
 "'"                        'display-local-help)

(spc-e
  :states '(normal visual)
  ""  '(nil                  :which-key "eval")
  "b" '(eval-buffer          :which-key "eval buffer")
  "x" '(eval-last-sexp       :which-key "eval sexp")
  "j" '(eval-print-last-sexp :which-key "eval print")
  "d" '(eval-defun           :which-key "eval defun"))

(spc-e
  :keymaps '(visual)
  "r" '(eval-region :which-key "eval region"))
#+end_src

** end init.el
:PROPERTIES:
:ID:       17ADECE2-E0DC-4D2D-AE59-516BFFEF7471
:END:

*** initialize theme & window
:PROPERTIES:
:ID:       B0C027F2-84FB-41C8-866A-F90936B1C243
:END:
#+begin_src emacs-lisp :tangle yes
(refresh-theme ns-system-appearance)
;; (add-hook 'window-setup-hook 'toggle-frame-maximized)
(general-after-init (toggle-frame-maximized))
#+end_src

*** gcmh
:PROPERTIES:
:ID:       6B1DE534-225F-4D9F-B0EA-28A3F136F29D
:END:
https://github.com/emacsmirror/gcmh

가비지 콜렉션을 사용자에게 느껴지지 않도록 조절
#+begin_src emacs-lisp :tangle yes
(use-package gcmh
  ;; :custom
 ;; (gcmh-vervose t)
  :init
  (gcmh-mode 1))
#+end_src

*** restore file-name-handler-alist
:PROPERTIES:
:ID:       B2F93BBC-8B4F-407D-8130-611217010D8C
:END:
#+begin_src emacs-lisp :tangle yes
(setq file-name-handler-alist file-name-handler-alist-var)
(makunbound 'file-name-handler-alist-var)
#+end_src

*** ends here
:PROPERTIES:
:ID:       9B789433-65DE-4BE5-8D0A-48DE26029717
:END:
#+begin_src emacs-lisp :tangle yes
(provide 'init)
;;; init.el ends here
#+end_src
