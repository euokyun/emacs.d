* advice
:PROPERTIES:
:ID:       A1CFA86E-4D2B-41C3-8EB7-87C5E6F9EE2A
:END:
다른 라이브러리에 정의된 함수의 기능을 수정
advice는 강력한 기능이고, 원본 소스 코드를 수정하기 전의 마지막 수단으로만 사용해야 한다.

advice 시스템은 두가지 set을 제공한다.
- add-function, 	remove-function	:: 함수값을 가진 변수들과 객체 필드.
- advice-add, 	advice-remove	:: 명명된 기능 위에 계층화된 set.

** where
advice의 함수와 원본 함수가 어떻게 합성되어야 하는지 명시한다.
*** :before
:PROPERTIES:
:ID:       265AC23D-4EBB-4597-A615-606A63B567A1
:END:
- 원본 함수 이전에 호출한다.
- 두 함수는 같은 인자를 받는다. 반환값은 원본 함수의 반환값을 따른다.
- ​~(lambda (&rest r) (apply advice-fun r) (apply orig-fun r))~​

*** :after
:PROPERTIES:
:ID:       B6AC0D54-3F60-4D57-8EF8-222D63BA35F9
:END:
- 원본 함수 이후에 호출한다.
- 두 함수는 같은 인자를 받는다. 반환값은 원본 함수의 반환값을 따른다.
- ​~(lambda (&rest r) (prog1 (apply orig-fun r) (apply advice-fun r)))~​

*** :override
- 원본 함수를 덮어쓴다. ​~remove-function~​으로 복구할 수 있다.

*** :around
- 원본 대신 호출하지만 추가적인 인자로 원본 함수를 제공할 수 있다.
- ​~(lambda (&rest r) (apply advice-fun orig-fun r))~​

**** 예시
​~:around~​를 통해 ​~orig-fun~​으로 원본 함수를 실행할 수 있다.
#+BEGIN_SRC emacs-lisp
(defun toggle-dogears (orig-fun &rest args)
  (unless (ignore-errors (kill-buffer "*Dogears List*"))
    (apply orig-fun args)))
(advice-add 'dogears-sidebar :around #'toggle-dogears)
#+END_SRC
*** :before-while
- 함수를 실행한 뒤 nil이면 원본 함수를 호출​*하지 않는다.*​
- 두 함수는 같은 인자를 받는다. 반환값은 원본 함수의 반환값을 따른다.
- ​~(lambda (&rest r) (and (apply function r) (apply oldfun r)))~​

*** :before-until
- 함수를 실행한 뒤 nil이면 원본 함수를 호출​*한다.*​
*** :after-while
- 원본 함수를 실행한 뒤 non-nil이면 ​~advice~​ 함수를 호출​*한다.*​
- 두 함수는 같은 인자를 받는다. 반환값은 ~advice~ 함수의 반환값을 따른다.
- ​~(lambda (&rest r) (and (apply oldfun r) (apply function r)))~​

*** :after-until
- 원본 함수를 실행한 뒤 nil이면 ​~advice~​ 함수를 호출​*한다.*​
- 두 함수는 같은 인자를 받는다. 반환값은 ~advice~ 함수의 반환값을 따른다.
- ​~(lambda (&rest r) (or  (apply oldfun r) (apply function r)))~​

*** :filter-args
- 먼저 함수를 실행한 뒤 결과(list여야 함)를 새 인자로써 원본 함수로 보낸다.
- ​~(lambda (&rest r) (apply oldfun (funcall function r)))~​

*** :filter-return
- 원본 함수를 실행하고 결과를 인자로 함수를 실행한다.
- ​~(lambda (&rest r) (funcall function (apply oldfun r)))~​

** 예시
*** 추가advice-add
:PROPERTIES:
:ID:       E5E22BFB-91C8-4039-902B-41D730D09917
:END:
호출시마다 반환값을 수정하는 ​~advice~​를 추가한다.
다음 코드는 ​~my-double~​에 ​~my-increase~​ 함수를 ​~advice~​로 추가한다.
#+NAME:filter-return
#+begin_src emacs-lisp
(defun my-double (x) (* x 2))
(defun my-increase (x) (+ x 1))
(advice-add 'my-double :filter-return #'my-increase)
#+end_src

#+begin_src emacs-lisp :include filter-return
(my-double 3)
#+end_src

#+RESULTS:
: 7

*** 제거advice-remove
:PROPERTIES:
:ID:       D88F9BEC-FA71-47AB-A6A7-1859F3966928
:END:
​~my-increase~​ advice를 제거한다.
#+begin_src emacs-lisp :include filter-return
(advice-remove 'my-double #'my-increase)

(my-double 3)
#+end_src

#+RESULTS:
: 6


** [[file:hook.org][Hook]]와 다른 점
- [[file:hook.org][hook]]는 라이브러리 작성자가 제공해야 함
- 사용자 정의를 위해 만들어졌기에 부작용이 덜함.
  따라서 advice를 지양하고 hook를 쓰는 것이 좋다.
