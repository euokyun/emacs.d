#+auto_tangle: t

* orderless
:PROPERTIES:
:ID:       7CC4D3B0-FA17-4EDB-BF1C-BF01187E8F5E
:END:
https://github.com/oantolin/orderless

#+begin_src emacs-lisp :tangle yes
(use-package orderless
  ;; :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion))))
  :config
  (with-eval-after-load 'company
    (if company-mode
        (defun just-one-face (fn &rest args)
          (let ((orderless-match-faces [completions-common-part]))
            (apply fn args)))
      (advice-add 'company-capf--candidates :around #'just-one-face))))
#+end_src

* vertico
:PROPERTIES:
:ID:       3331A558-05E7-4F94-813D-FBC42DBBB1A0
:END:
** vertico
:PROPERTIES:
:ID:       8A1EC26A-5F2C-4BEF-BD1A-88C3D8E5199B
:END:
https://github.com/minad/vertico
#+begin_src emacs-lisp :tangle yes
(use-package vertico
  :init
  (vertico-mode)
  ;; normal-mode시 
  :hook (minibuffer-setup . (lambda ()
                              (setq-local evil-move-beyond-eol t)
                              (cursor-intangible-mode)))
  :custom
  (vertico-scroll-margin 0)
  (vertico-resize t)
  (enable-recursive-minibuffers t)
  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))
  (resize-mini-windows t)

  :general
  (vertico-map
   :states 'insert
   "<escape>" '(lambda ()
                 (interactive)
                 (evil-normal-state)
                 (ignore-errors (forward-char 1))))
  (vertico-map
   :states 'normal
    "q" 'abort-recursive-edit
   [remap evil-goto-first-line] 'vertico-first
   [remap evil-goto-line] 'vertico-last)
  ;; (vertico-map
  ;;  :states 'insert
  ;;  "C-d" 'vertico-scroll-up)

  ;; :config/el-patch
  ;; ;; 이거 왜 반대로 작동하게 해놓은 건지 모르겠다.
  ;; (defun vertico-scroll-down (&optional n)
  ;;   "Go back by N pages."
  ;;   (interactive "p")
  ;;   (vertico--goto (max 0 ((el-patch-swap - +) vertico--index (* (or n 1) vertico-count)))))

  :config
  ;; persist history
  ;; use psession instead.
  ;; (use-package savehist
  ;;   :init
  ;;   (savehist-mode))

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)

  ;; adjust number of visible candidates when resizing
  ;; 작아지기만 하고 다시 커지지는 않는다..
  ;; (defun vertico-resize--minibuffer ()
  ;;   (add-hook 'window-size-change-functions
  ;;             (lambda (win)
  ;;               (let ((height (window-height win)))
  ;;                 (when (/= (1- height) vertico-count)
  ;;                   (setq-local vertico-count (1- height))
  ;;                   (vertico--exhibit))))
  ;;             t t))
  ;; (advice-add #'vertico--setup :before #'vertico-resize--minibuffer)

  ;; add » current prefix
  (advice-remove 'vertico--format-candidate 'vertico--format-candidate@vertico-prefix)
  (define-advice vertico--format-candidate
      (:around (orig cand prefix suffix index _start) vertico-prefix)
    (setq cand (funcall orig cand prefix suffix index _start))
    (concat
     (if (= vertico--index index)
         (propertize "»" 'face 'vertico-current)
       " ")
     cand)))
#+end_src

** vertico-directory
:PROPERTIES:
:ID:       B97DC145-5A85-4BBE-8128-3B8DAA5EE973
:END:
#+begin_src emacs-lisp :tangle yes
(use-package vertico-directory
  :after vertico
  ;; :load-path "~/.config/emacs/straight/build/vertico/extensions/"
  :load-path "straight/repos/vertico/extensions/"
  :straight vertico
  ;; More convenient directory navigation commands
  :general
  (vertico-map
   "M-RET" 'vertico-exit-input
   "RET" 'vertico-directory-enter
   ;; tramp를 쓸 때 귀찮아짐
   ;; "DEL" 'vertico-directory-delete-char
   "DEL" 'backward-delete-char
   ;; "M-DEL" 'vertico-directory-up
   "M-DEL" 'vertico-directory-delete-word)

  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** maginalia
:PROPERTIES:
:ID:       F58E1301-87D4-4FC2-A454-4BC6417D323D
:END:
https://github.com/minad/marginalia
#+begin_src emacs-lisp :tangle yes
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  ;; :bind (("M-A" . marginalia-cycle)
  ;;        :map minibuffer-local-map
  ;;        ("M-A" . marginalia-cycle))
  :general (minibuffer-local-map
            "M-A" 'marginalia-cycle)

  ;; :config/el-patch
  ;; (defun marginalia--truncate (str width)
  ;; "Truncate string STR to WIDTH."
  ;; (when-let (pos (string-match-p "\n" str))
  ;;   (setq str (substring str 0 pos)))
  ;; (if (< width 0)
  ;;     (nreverse (truncate-string-to-width (reverse str) (- width) 0 ?\s t))
  ;;   (truncate-string-to-width str width 0 ?\s (el-patch-remove t))))
  ;; The :init configuration is always executed (Not lazy!)
  :init
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

** all-the-icons-completion
:PROPERTIES:
:ID:       C140FD74-E355-4F1E-AC5B-709AB4E9BD4C
:END:
https://github.com/iyefrat/all-the-icons-completion

marginalia에 all-the-icons 지원을 추가한다.
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons-completion
  ;; :hook (marginalia-mode-hook . all-the-icons-completion-marginalia-setup)
  ;; :config/el-patch
  ;; ;; (defun all-the-icons-completion-get-file-icon (cand)
  ;; ;;   "Return the icon for the candidate CAND of completion category file."
  ;; ;;   (cond ((string-match-p "\\/$" cand) (concat (all-the-icons-icon-for-dir cand (el-patch-add :height 0.8333333333333334 :v-adjust 0)) (el-patch-swap " " "\t")))
  ;; ;;         (t (concat (all-the-icons-icon-for-file cand (el-patch-add :height 0.8333333333333334 :v-adjust 0)) (el-patch-swap " " "\t")))))

  ;; (defun all-the-icons-completion-get-file-icon (cand)
  ;;   "Return the icon for the candidate CAND of completion category file."
  ;;   (cond ((string-match-p "\\/$" cand)
  ;;          (concat
  ;;           (all-the-icons-icon-for-dir cand :face 'all-the-icons-completion-dir-face
  ;;                                       (el-patch-add :height 0.8333333333333334 :v-adjust 0))
  ;;           " "))
  ;;         (t (concat (all-the-icons-icon-for-file cand (el-patch-add :height 0.8333333333333334 :v-adjust 0)) " "))))

  ;; (defun all-the-icons-completion-get-buffer-icon (cand)
  ;;   "Return the icon for the candidate CAND of completion category buffer."
  ;;   (let* ((mode (buffer-local-value 'major-mode (get-buffer cand)))
  ;;          (icon (all-the-icons-icon-for-mode mode (el-patch-add :height 0.8333333333333334 :v-adjust 0)))
  ;;          (parent-icon (all-the-icons-icon-for-mode (get mode 'derived-mode-parent) (el-patch-add :height 0.8333333333333334 :v-adjust 0))))
  ;;     (concat
  ;;      (if (symbolp icon)
  ;;          (if (symbolp parent-icon)
  ;;              (all-the-icons-faicon "sticky-note-o" (el-patch-add :height 0.8333333333333334 :v-adjust 0))
  ;;            parent-icon)
  ;;        icon)
  ;;      " ")))

  :config

  (el-patch-feature all-the-icons-completion)
  (with-eval-after-load 'all-the-icons-completion
    (el-patch-defun all-the-icons-completion-get-file-icon (cand)
      "Return the icon for the candidate CAND of completion category file."
      (cond ((string-match-p "\\/$" cand)
             (concat
              (all-the-icons-icon-for-dir cand :face 'all-the-icons-completion-dir-face
                                          (el-patch-add :height 0.8333333333333334 :v-adjust 0))
              (el-patch-swap " " "\t")))
            (t (concat (all-the-icons-icon-for-file cand (el-patch-add :height 0.8333333333333334 :v-adjust 0)) (el-patch-swap " " "\t")))))

    (el-patch-defun all-the-icons-completion-get-buffer-icon (cand)
      "Return the icon for the candidate CAND of completion category buffer."
      (let* ((mode (buffer-local-value 'major-mode (get-buffer cand)))
             (icon (all-the-icons-icon-for-mode mode (el-patch-add :height 0.8333333333333334 :v-adjust 0)))
             (parent-icon (all-the-icons-icon-for-mode (get mode 'derived-mode-parent) (el-patch-add :height 0.8333333333333334 :v-adjust 0))))
        (concat
         (if (symbolp icon)
             (if (symbolp parent-icon)
                 (all-the-icons-faicon "sticky-note-o")
               parent-icon)
           icon)
         (el-patch-swap " " "\t")))))

  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup)
  (all-the-icons-completion-mode))
#+end_src

* consult
:PROPERTIES:
:ID:       7D87AEFA-7AE5-4B15-8ED0-1DA07C0847D0
:END:
** consult
:PROPERTIES:
:ID:       F5B0D8A5-34AE-4BC9-BA58-39972734F2AA
:END:
https://github.com/minad/consult
#+begin_src emacs-lisp :tangle yes
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :general (;; C-c bindings (mode-specific-map)
            "C-c h" 'consult-history
            "C-c m" 'consult-mode-command
            "C-c b" 'consult-bookmark
            "C-c k" 'consult-kmacro
            ;; C-x bindings (ctl-x-map)
            "C-x M-:" 'consult-complex-command ;; orig. repeat-complex-command
            "C-x b" 'consult-buffer            ;; orig. switch-to-buffer
            ;; "s-o" '(lambda (arg) (interactive "P")
            ;;          (with-persp-buffer-list () (consult-buffer)))
            "s-o" 'consult-buffer
            "M-s-o" 'consult-buffer
            "s-O" 'find-file
            "C-x 4 b" 'consult-buffer-other-window ;; orig. switch-to-buffer-other-window
            "C-x 5 b" 'consult-buffer-other-frame ;; orig. switch-to-buffer-other-frame
            ;; Custom M-# bindings for fast register access
            "M-#" 'consult-register-load
            "M-'" 'consult-register-store ;; orig. abbrev-prefix-mark (unrelated)
            "C-M-#" 'consult-register
            ;; Other custom bindings
            "M-y" 'consult-yank-pop ;; orig. yank-pop
            "<help> a" 'consult-apropos ;; orig. apropos-command
            ;; M-g bindings (goto-map)
            "M-g e" 'consult-compile-error
            ;; ("M-g f" 'consult-flymake)               ;; Alternative: consult-flycheck
            "M-g f" 'consult-flycheck ;; Alternative: consult-flycheck
            "M-g g" 'consult-goto-line ;; orig. goto-line
            "M-g M-g" 'consult-goto-line ;; orig. goto-line
            "M-g o" 'consult-outline     ;; Alternative: consult-org-heading
            "M-g m" 'consult-mark
            "M-g k" 'consult-global-mark
            "M-g i" 'consult-imenu
            "M-g I" 'consult-imenu-multi
            ;; M-s bindings (search-map)
            "M-s f" 'consult-find
            "M-s F" 'consult-locate
            "M-s g" 'consult-grep
            "M-s G" 'consult-git-grep
            "M-s r" 'consult-ripgrep
            "M-s l" 'consult-line
            ;; "s-f" 'consult-line
            "s-f" 'consult-ripgrep-or-line
            "M-s L" 'consult-line-multi
            "s-F" 'consult-line-multi
            "M-s m" 'consult-multi-occur
            "M-s k" 'consult-keep-lines
            "M-s u" 'consult-focus-lines
            ;; Isearch integration
            "M-s e" 'consult-isearch-history)
  (isearch-mode-map
   "M-e" 'consult-isearch-history ;; orig. isearch-edit-string
   "M-s e" 'consult-isearch-history ;; orig. isearch-edit-string
   ;; "M-s l" 'consult-line ;; needed by consult-line to detect isearch
   ;; "M-s L" 'consult-line-multi
   "s-f" 'consult-ripgrep-or-line ;; needed by consult-line to detect isearch
   "s-F" 'consult-line-multi) ;; ;; needed by consult-line to detect isearch
  ;; needed by consult-line to detect isearch

   ;; Enable automatic preview at point in the *Completions* buffer. This is
   ;; relevant when you use the default completion UI. You may want to also
   ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init
  (fset 'multi-occur #'consult-multi-occur)

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config
  ;; fallback for corfu
  (setq-default completion-in-region-function 'consult-completion-in-region)

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   ;; :preview-key '(:debounce 0.2 any)
   :preview-key (list :debounce 0.2 (kbd "S-SPC"))
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   consult-buffer
   :preview-key (kbd "S-SPC"))

  ;; add command-local keybind
  (defun define-minibuffer-key (key &rest defs)
    "Define KEY conditionally in the minibuffer.
DEFS is a plist associating completion categories to commands."
    (define-key minibuffer-local-map key
      (list 'menu-item nil defs :filter
            (lambda (d)
              (plist-get d (completion-metadata-get
                            (completion-metadata (minibuffer-contents)
                                                 minibuffer-completion-table
                                                 minibuffer-completion-predicate)
                            'category))))))

;;;###autoload
  (defun consult-find-for-minibuffer ()
    "Search file with find, enter the result in the minibuffer."
    (interactive)
    (let* ((enable-recursive-minibuffers t)
           (default-directory (file-name-directory (minibuffer-contents)))
           (file (consult--find
                  (replace-regexp-in-string
                   "\\s-*[:([].*"
                   (format " (via find in %s): " default-directory)
                   (minibuffer-prompt))
                  #'consult--find-builder
                  (file-name-nondirectory (minibuffer-contents)))))
      (delete-minibuffer-contents)
      (insert (expand-file-name file default-directory))
      (exit-minibuffer)))

  (define-minibuffer-key [(super f)]
    'consult-location #'previous-history-element
    'file #'consult-find-for-minibuffer
    'consult-grep #'previous-history-element)

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; Optionally configure a function which returns the project root directory.
  ;; There are multiple reasonable alternatives to chose from.
  ;; 1. project.el (project-roots)
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project)))))
;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-root-function #'projectile-project-root)
;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-root-function #'vc-root-dir)
;;;; 4. locate-dominating-file
  ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))

  (defcustom consult-ripgrep-or-line-limit 300000
    "Buffer size threshold for `my-consult-ripgrep-or-line'.
When the number of characters in a buffer exceeds this threshold,
`consult-ripgrep' will be used instead of `consult-line'."
    :type 'integer)

;;;###autoload
  (defun consult-ripgrep-or-line ()
    "Call `consult-line' for small buffers or `consult-ripgrep' for large files."
    (interactive)
    (if (or (not buffer-file-name)
            (buffer-narrowed-p)
            (ignore-errors
              (file-remote-p buffer-file-name))
            (jka-compr-get-compression-info buffer-file-name)
            (<= (buffer-size)
                (/ consult-ripgrep-or-line-limit
                   (if (eq major-mode 'org-mode) 4 1))))
        (consult-line)
      (when (file-writable-p buffer-file-name)
        (save-buffer))
      (let ((consult-ripgrep-command
             (concat "rg "
                     "--null "
                     "--line-buffered "
                     "--color=ansi "
                     "--max-columns=250 "
                     "--no-heading "
                     "--line-number "
                     ;; adding these to default
                     "--smart-case "
                     "--hidden "
                     "--max-columns-preview "
                     ;; add back filename to get parsing to work
                     "--with-filename "
                     ;; defaults
                     "-e ARG OPTS "
                     (shell-quote-argument buffer-file-name))))
        (consult-ripgrep)))))
#+end_src

- [ ] describe-face 등에 history

** consult-dir
:PROPERTIES:
:ID:       0AAC584A-A6CC-4671-9CC4-7D6E66DA814F
:END:
https://github.com/karthink/consult-dir

#+begin_src emacs-lisp :tangle yes
(use-package consult-dir
  :straight t
  :general
  ("C-x C-d" 'consult-dir)
  (vertico-map
   "C-x C-d" 'consult-dir
   "C-x C-j" 'consult-dir-jump-file)
  :config
  (setq consult-dir-project-list-function #'consult-dir-projectile-dirs)
  (add-to-list 'consult-dir-sources 'consult-dir--source-tramp-ssh t))
#+end_src

** consult-flycheck
:PROPERTIES:
:ID:       C3804C21-A5B7-4C22-BF4E-80353AEA8CF6
:END:
https://github.com/minad/consult-flycheck

#+begin_src emacs-lisp :tangle yes
(use-package consult-flycheck
  :after (consult flycheck))
#+end_src

** consult-lsp
:PROPERTIES:
:ID:       2E9B614D-80B5-4D73-91FA-100528CD9BE9
:END:
https://github.com/gagbo/consult-lsp

#+begin_src emacs-lisp :tangle yes
(use-package consult-lsp
  :after (consult lsp)
  :general
  ([remap xref-find-apropos] 'consult-lsp-symbols))
#+end_src

** consult-projectile
:PROPERTIES:
:ID:       C25459EC-A842-48E9-83AB-AC20D503A226
:END:
https://gitlab.com/OlMon/consult-projectile/

#+begin_src emacs-lisp :tangle yes
(use-package consult-projectile
  :straight (consult-projectile
             :type git
             :host gitlab
             :repo "OlMon/consult-projectile"
             :branch "master")
  :after (consult projectile))
#+end_src

** COMMENT consult-proj
:PROPERTIES:
:ID:       C47A4477-9CF0-4A59-9A59-6D8230F363E2
:END:
project.el 지원
https://github.com/Qkessler/consult-proj

** COMMENT vertico-posframe
:PROPERTIES:
:ID:       449371A2-08D7-4ED6-83FB-480176FF41B2
:END:
https://github.com/tumashu/vertico-posframe

* corfu
** corfu
:PROPERTIES:
:ID:       04B06BDA-AF58-4132-BF32-03F555665970
:END:
https://github.com/minad/corfu

#+begin_src emacs-lisp :tangle yes
(use-package corfu
  :straight (:host github
             :repo "minad/corfu")
  :load-path "straight/repos/corfu/extensions/"
  ;; :if (display-graphic-p)
  :custom
  (corfu-cycle t)                     ; Enable cycling for `corfu-next/previous'
  ;; (completion-cycle-threshold 3)
  (corfu-auto t)                        ; Enable auto completion
  (corfu-auto-prefix 3)
  ;; (corfu-commit-predicate nil) ; Do not commit selected candidates on next input
  ;; (corfu-quit-at-boundary t)           ; Automatically quit at word boundary
  ;; (corfu-quit-no-match t)              ; Automatically quit if there is no match
  (corfu-quit-no-match 'separator)     ; Automatically quit if there is no match
  ;; (corfu-preview-current nil)          ; Disable current candidate preview
  ;; (corfu-preselect-first nil)           ; Disable candidate preselection
  ;; (corfu-echo-documentation nil)        ; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)               ; Use scroll margin
  ;; (tab-always-indent 'complete)

  ;; You may want to enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))
  ;; :hook (minibuffer-setup . corfu-mode)
  :hook ((minibuffer-setup . (lambda ()
                               (let ((corfu-auto nil))
                                 (corfu-mode)))))
  ;; (minibuffer-exit . (lambda ()
  ;;                      (setq-local corfu-auto t)))
         

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  :init
  (global-corfu-mode)
  :general
  ("C-SPC" 'completion-at-point)
  (corfu-map
   ;; "SPC" 'corfu-insert-separator
   "SPC" (general-predicate-dispatch 'corfu-insert-separator
           (eq 'corfu-insert-separator last-command)
           'corfu-quit)
   ;; "SPC" (general-key-dispatch
   ;;         '(lambda () (interactive) 'corfu-insert-separator)
   ;;         :timeout 0.25
   ;;         "SPC" 'corfu-insert)

   ;; :states 'insert
   ;; "C-n" 'corfu-next
   ;; "C-p" 'corfu-previous
   [remap evil-complete-next] 'corfu-next
   [remap evil-complete-previous] 'corfu-previous
   ;; [remap evil-beginning-of-line] 'corfu-beginning-of-prompt
   ;; [remap evil-end-of-line] 'corfu-end-of-prompt
   ;; [remap evil-undo] 'corfu-reset
   ;; "<escape>" 'corfu-quit
   ;; [remap evil-insert] '(lambda (&optional args)
   ;;                        (interactive)
   ;;                        (evil-insert args)
   ;;                        (completion-at-point))
   [remap completion-at-point] 'corfu-quit
   [remap evil-force-normal-state] '(lambda () (interactive)
                                      (call-interactively 'corfu-quit)
                                      (evil-force-normal-state))
                                      
   [remap evil-mc-undo-all-cursors] 'corfu-quit)
  ([remap evil-complete-next] nil
   [remap evil-complete-previous] nil)

  (corfu-map
   :states 'motion
   "j" 'corfu-next
   "k" 'corfu-previous
   ;; [remap evil-next-line] 'corfu-next
   ;; [remap evil-previous-line] 'corfu-previous
   "q" 'corfu-quit)

  (corfu-map
   :states 'normal
   "DEL" 'corfu-reset)

  ;; (corfu-map
  ;;  :states 'insert
  ;;  "C-SPC" 'corfu-quit)

  ;; ;; tab-and-go
  ;; (corfu-map
  ;;  "TAB" 'corfu-next
  ;;  "<tab>" 'corfu-next
  ;;  "S-TAB" 'corfu-previous
  ;;  "<backtab>" 'corfu-previous)

  :config
;;;###autoload
  (defun corfu-beginning-of-prompt ()
    "Move to beginning of completion input."
    (interactive)
    (corfu--goto -1)
    (goto-char (car completion-in-region--data)))

;;;###autoload
  (defun corfu-end-of-prompt ()
    "Move to end of completion input."
    (interactive)
    (corfu--goto -1)
    (goto-char (cadr completion-in-region--data)))

;;;###autoload
  (defun corfu-complete-common-or-next ()
    "Complete common prefix or go to next candidate."
    (interactive)
    (if (= corfu--total 1)
        (progn
          (corfu--goto 1)
          (corfu-insert))
      (let* ((input (car corfu--input))
             (str (if (thing-at-point 'filename) (file-name-nondirectory input) input))
             (pt (length str))
             (common (try-completion str corfu--candidates)))
        (if (and (> pt 0)
                 (stringp common)
                 (not (string= str common)))
            (insert (substring common pt))
          (corfu-next))))))
#+end_src

** corfu components
:PROPERTIES:
:ID:       AB148D0E-8570-49EC-B8C8-D46B1FCD8B8C
:END:
#+begin_src emacs-lisp :tangle yes
(use-package corfu-indexed
  :straight nil
  :after corfu
  :config
  (corfu-indexed-mode))

(use-package corfu-history
  :straight nil
  :after corfu
  :config
  (corfu-history-mode))

;; (use-package corfu-info
  ;; :after corfu
;;   :straight nil)

;; (use-package corfu-quick
  ;; :after corfu
;;   :straight nil)
#+end_src

** corfu-terminal

#+begin_src emacs-lisp :tangle yes
(use-package popon
 :straight (popon :type git :repo "https://codeberg.org/akib/emacs-popon.git"))

(use-package corfu-terminal
  :straight (corfu-terminal
             :type git
             :repo "https://codeberg.org/akib/emacs-corfu-terminal.git")
  :unless (display-graphic-p)
  :after popon)
#+end_src

** kind-icon
:PROPERTIES:
:ID:       BB37E648-72E0-4EEA-AC30-0CD92E03EC5D
:END:
https://github.com/jdtsmith/kind-icon

company에서 company-box가 그러하듯 corfu에서 아이콘을 표시하는 패키지.
#+begin_src emacs-lisp :tangle yes
(use-package kind-icon
  :straight (kind-icon
             :type git
             :host github
             :repo "jdtsmith/kind-icon")
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  (kind-icon-blend-background nil)
  (kind-icon-blend-frac 0.08)
  (svg-lib-icons-dir (no-littering-expand-var-file-name "svg-lib/cache/"))
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
  (advice-add 'refresh-theme :after #'(lambda (&rest _) (kind-icon-reset-cache))))
#+end_src

- backend의 ​='kind=​를 읽어옴

** DONE cape [2/2]
CLOSED: [2022-08-22 Mon 00:32]
:PROPERTIES:
:ID:       8F65C0EC-D60B-4B50-A55D-E81BAA03494F
:END:
https://github.com/minad/cape

corfu의 backend 설정 패키지
company의 backend를 corfu에서도 사용할 수 있도록 함
#+begin_src emacs-lisp :tangle yes
(use-package cape
  :straight (cape
             :type git
             :host github
             :repo "minad/cape")

  :general
  ;; Bind dedicated completion commands
  ;; ("M-/ p" 'completion-at-point) ;; capf
  ("M-/ t" 'complete-tag) ;; etags
  ("M-/ d" 'cape-dabbrev) ;; or dabbrev-completion
  ("M-/ f" 'cape-file)
  ("M-/ k" 'cape-keyword)
  ("M-/ s" 'cape-symbol)
  ("M-/ a" 'cape-abbrev)
  ("M-/ i" 'cape-ispell)
  ("M-/ l" 'cape-line)
  ("M-/ w" 'cape-dict)
  ("M-/ \\" 'cape-tex)
  ("M-/ &" 'cape-sgml)
  ("M-/ r" 'cape-rfc1345)
  :hook (emacs-lisp-mode . (lambda ()
                             (setq-local completion-at-point-functions
                                         (-replace 'elisp-completion-at-point
                                                   (cape-capf-predicate
                                                    #'elisp-completion-at-point
                                                    #'(lambda (sym) (not (keywordp sym))))
                                                   completion-at-point-functions)))))
#+end_src

- [X] 자동으로 버퍼 따라 백엔드 활성화가 필요함.
  + setq로 설정하면 되는 듯 하다. 기본 백엔드가 자동으로 사용하나? 그럼 왜 add-to-list는 안 되는거지?
    - 기본 백엔드가 자동으로 사용하는데, 모드마다 사용하는 백엔드 범위가 다른듯함.
- [X] cape-yasnippet을 백엔드에서 제거하고 단축키를 따로 설정하는 편이 좋겠음.
  + 제거함. tempel을 사용할 것.

** corfu-doc
:PROPERTIES:
:ID:       ED976D3C-4163-44A7-A1E8-0E027E97DD37
:END:
https://github.com/galeo/corfu-doc

corfu용 quickhelp
#+begin_src emacs-lisp :tangle yes
(use-package corfu-doc
  :straight (corfu-doc
             :type git
             :host github
             :repo "galeo/corfu-doc")
  :hook (corfu-mode . corfu-doc-mode)
  :custom
  ;; (corfu-doc-max-height 20)
  (corfu-doc-max-width 60)
  :general
  (corfu-map
   "M-p" 'corfu-doc-scroll-down
   "M-n" 'corfu-doc-scroll-up
   "S-SPC" 'corfu-doc-toggle))

  ;; :config/el-patch
  ;; (defun corfu-doc--make-frame (x y width height content)
  ;;   "Show child frame at X/Y with WIDTH/HEIGHT and CONTENT."
  ;;   (let* ((window-min-height 1)
  ;;          (window-min-width 1)
  ;;          (x-gtk-resize-child-frames
  ;;           (let ((case-fold-search t))
  ;;             (and
  ;;              ;; XXX HACK to fix resizing on gtk3/gnome taken from posframe.el
  ;;              ;; More information:
  ;;              ;; * https://github.com/minad/corfu/issues/17
  ;;              ;; * https://gitlab.gnome.org/GNOME/mutter/-/issues/840
  ;;              ;; * https://lists.gnu.org/archive/html/emacs-devel/2020-02/msg00001.html
  ;;              (string-match-p "gtk3" system-configuration-features)
  ;;              (string-match-p "gnome\\|cinnamon" (or (getenv "XDG_CURRENT_DESKTOP")
  ;;                                                     (getenv "DESKTOP_SESSION") ""))
  ;;              'resize-mode)))
  ;;          (after-make-frame-functions)
  ;;          (border (alist-get 'child-frame-border-width corfu-doc--frame-parameters))
  ;;          (buffer (corfu-doc--make-buffer content)))
  ;;     (unless (and (frame-live-p corfu-doc--frame)
  ;;                  (eq (frame-parent corfu-doc--frame) (window-frame)))
  ;;       (when corfu-doc--frame (delete-frame corfu-doc--frame))
  ;;       (setq corfu-doc--frame (make-frame
  ;;                               `((parent-frame . ,(window-frame))
  ;;                                 (minibuffer . ,(minibuffer-window (window-frame)))
  ;;                                 (line-spacing . ,line-spacing)
  ;;                                 ;; Set `internal-border-width' for Emacs 27
  ;;                                 (internal-border-width . ,border)
  ;;                                 ,@corfu-doc--frame-parameters))))
  ;;     ;; XXX HACK Setting the same frame-parameter/face-background is not a nop (BUG!).
  ;;     ;; Check explicitly before applying the setting.
  ;;     ;; Without the check, the frame flickers on Mac.
  ;;     (el-patch-remove (let* ((face (if (facep 'child-frame-border) 'child-frame-border 'internal-border)))
  ;;                        (internal-border-color (face-attribute 'corfu-default :background nil 'default))
  ;;                        (bg-color (face-attribute 'corfu-default :background nil 'default)))
  ;;                      (unless (and (equal (face-attribute face :background corfu-doc--frame 'default)
  ;;                                          internal-border-color)
  ;;                                   (equal (frame-parameter corfu--frame 'background-color) bg-color))
  ;;                        (set-face-background face internal-border-color corfu-doc--frame)
  ;;                        ;; XXX HACK We have to apply the face background before adjusting the frame parameter,
  ;;                        ;; otherwise the border is not updated (BUG!).
  ;;                        (set-frame-parameter corfu-doc--frame 'background-color bg-color))
  ;;                      ;; set fringe color
  ;;                      (unless (equal (face-attribute 'fringe :background corfu-doc--frame 'default)
  ;;                                     bg-color)
  ;;                        (set-face-background 'fringe bg-color corfu-doc--frame)))
  ;;     (let ((win (frame-root-window corfu-doc--frame)))
  ;;       (set-window-buffer win buffer)
  ;;       ;; Mark window as dedicated to prevent frame reuse (#60)
  ;;       (set-window-dedicated-p win t))
  ;;     ;; XXX HACK Make the frame invisible before moving the popup in order to avoid flicker.
  ;;     (unless (eq (cdr (frame-position corfu-doc--frame)) y)
  ;;       (make-frame-invisible corfu-doc--frame))
  ;;     (set-frame-position corfu-doc--frame x y)
  ;;     (set-frame-size corfu-doc--frame width height t)
  ;;     (make-frame-visible corfu-doc--frame)))

  ;; :config
  ;; ;; help에서 독스트링을 가리는 message를 제거함.
  ;; ;; (defun override-ignore-function (&rest _) nil)
  ;; (define-advice corfu-doc-show (:around (orig) ignore-message)
  ;;   (advice-add 'help-window-display-message :override 'ignore)
  ;;   (funcall orig)
  ;;   (advice-remove 'help-window-display-message 'ignore)))
#+end_src

** corfu-doc-terminal

#+begin_src emacs-lisp :tangle yes
(use-package corfu-doc-terminal
  :straight (corfu-doc-terminal
             :type git
             :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git")
  :unless (display-graphic-p))
#+end_src

* embark
:PROPERTIES:
:ID:       76C73422-C474-4F74-896A-FB777FF11A02
:END:
** embark
https://github.com/oantolin/embark

#+begin_src emacs-lisp :tangle yes
(use-package embark
  :general
  ("s-."    'embark-act                   ; pick some comfortable binding
   "s->"    'embark-act-all               ; act all
   "M-."    'embark-dwim                  ; good alternative: M-.
   "C-h B"  'embark-bindings)             ; alternative for `describe-bindings'
  (embark-file-map
   "f"      'embark/dired
   "s-f"    'embark/consult-ripgrep)

  (embark-collect-mode-map
   ;; m
   [remap evil-set-marker] 'embark-collect-mark
   ;; t
   [remap evil-find-char-to] 'embark-collect-toggle-marks
   ;; u
   [remap evil-undo] 'embark-collect-unmark
   "U" 'embark-collect-unmark-all)
  
  :custom
  ;; 왠지 이게 없으면 `embark--confirm'이 작동하지 않는다.
  (y-or-n-p-use-read-key t)               ; `read-key' instead of `read-from-minibuffer'
  ;; embark action 버퍼 제거
  ;; (embark-indicators '(embark-minimal-indicator
  ;;                      embark-highlight-indicator
  ;;                      embark-isearch-highlight-indicator))
  
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
#+end_src

*** config
:PROPERTIES:
:ID:       DC624A68-3F1C-4D52-ADA9-69451BDEFE37
:END:
#+begin_src emacs-lisp :tangle yes
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
#+end_src

*** embark functions
:PROPERTIES:
:ID:       32476348-E172-471D-835A-058DFE6F2875
:END:
#+begin_src emacs-lisp :tangle yes
(defun open-dired (file)
  "Dired this directory"
  (dired (file-name-directory file)))

(defun embark/consult-ripgrep (file)
  "consult-ripgrep in this directory."
  (let ((default-directory (file-name-directory file)))
    (consult-ripgrep)))
#+end_src

*** embark-ace-window
:PROPERTIES:
:ID:       95AC42D0-4C4D-4708-B505-1F4C86BBE36D
:END:
#+begin_src emacs-lisp :tangle yes
(eval-when-compile
  (defmacro my/embark-ace-action (fn)
    `(defun ,(intern (concat "my/embark-ace-" (symbol-name fn))) ()
       (interactive)
       (with-demoted-errors "%s"
         (require 'ace-window)
         (let ((aw-dispatch-always t))
           (aw-switch-to-window (aw-select nil))
           (call-interactively (symbol-function ',fn)))))))

(define-key embark-file-map     (kbd "`") (my/embark-ace-action find-file))
(define-key embark-buffer-map   (kbd "`") (my/embark-ace-action switch-to-buffer))
(define-key embark-bookmark-map (kbd "`") (my/embark-ace-action bookmark-jump))
#+end_src

*** automatically shrink vertico
:PROPERTIES:
:ID:       52CFB476-7312-4063-9A51-ABDE27397118
:END:
#+begin_src emacs-lisp :tangle yes
(defun +embark-live-vertico ()
  "Shrink Vertico minibuffer when `embark-live' is active."
  (when-let (win (and (string-prefix-p "*Embark Live" (buffer-name))
                      (active-minibuffer-window)))
    (with-selected-window win
      (when (and (bound-and-true-p vertico--input)
                 (fboundp 'vertico-multiform-unobtrusive))
        (vertico-multiform-unobtrusive)))))

(add-hook 'embark-collect-mode-hook #'+embark-live-vertico)
#+end_src

*** end
:PROPERTIES:
:ID:       A6FAFC1D-2D9D-451E-9EF1-BA39D55C5A0F
:END:
#+begin_src emacs-lisp :tangle yes
)
#+end_src

** embark-consult
:PROPERTIES:
:ID:       9084A9E0-3B3C-4FFF-8FAE-72EAFABD3339
:END:
#+begin_src emacs-lisp :tangle yes
(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** embark-vc
:PROPERTIES:
:ID:       BA392E3F-75D5-478E-8510-7D39EA3F3B0B
:END:
https://github.com/elken/embark-vc/

Magit, code-review와 같은 version control 패키지에 대한 지원
#+begin_src emacs-lisp :tangle yes
(use-package embark-vc
  :straight (embark-vc
             :type git
              :host github
              :repo "elken/embark-vc"))
#+end_src

** COMMENT avy-embark-collect
:PROPERTIES:
:ID:       2BFFA101-DC7F-46DD-A55E-182D91D90A49
:END:
#+begin_src emacs-lisp :tangle yes
(use-package avy-embark-collect)
#+end_src
